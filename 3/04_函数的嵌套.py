"""
作用域：变量的访问的权限
里面访问外面没有问题，外面访问里面不能随便访问到


    1.函数可以进行返回值进行返回
    2.函数可以作为参数进行传递
    3.函数名实际上就是一个变量名，都表示的是一个内存地址


"""

a = 10  # 全局变量->全局作用域
print(a)


def func0():  # 全局的函数
    b = 20  # 局部变量->局部作用域
    print(a)


# def func1():
#     pass
#
# def func2():#这个叫函数的调用，并不是函数的嵌套
#     func1()

# def func1():
#     def func2():  # 函数的嵌套，局部变量
#         pass
#
#     func2()  # 局部的东西一般都是局部自己访问使用的

def func1():
    print(123)

    def func2():
        print(456)

        def func3():
            print(789)

        print(1)
        func3()
        print(2)

    print(3)
    func2()
    print(4)


func1()  # 调用嵌套函数，首先是打印“123”->"3"->"456"->"1"->"789"->"2"->"4"
print("---------------------------------------------------------------------")


def func():
    def inner():
        print(123)

    print(inner)
    return inner  # 返回的是一个函数，此时吧函数当作一个变量返回了(注意，这里不能加括号，jail括号以后，返回但是内部的函数的执行的结果的返回，即None)


b1 = func()  # b1是函数内部的inner
print(b1)
b1()


def an():
    print("123an")


bn = an
bn()  # 和函数an()一样,函数可以看作为一个变量，可以进行赋值与返回

print("--------------------------------------------------------------------------------")


# 代理模式
def func4(an):  # 此时an收到的是一个函数
    an()  # 执行这个函数


def target():
    print(123456)


func4(an)
func4(target)  # 实参可以是函数
print("-------------------------------------------------------------------------------")

# global：在局部引入全局变量
a1 = 10


def func5():
    global a1  # 把外面的全局变量引入到局部
    a1 = 20  # 如果没有global就只是创建了一个局部变量，没有去改变全局变量中的a


func5()
print(a1)
print("---------------------------------------------------------------------------------")


# nonlocal:在局部引入外层的局部变量
def func5():
    a = 10

    def func2():
        nonlocal a  # 向外找一层，看看有没有该变量，如果有，就将该变量引入，反之，就继续向外一层寻找，直到全局（不包括全局）（最外层都没有的话，就报错）
        a = 20

    func2()
    print(a)


func5()
